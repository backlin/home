
#---------------------------------------------------------[ Package management ]

# Case insensitive package loading
# In case package is not found, prompt for installation
library <- function(..., character.only=FALSE, install){
    require(utils)
    if(character.only){
        pkg <- c(...)
    } else {
        pkg <- sapply(substitute(...()), as.character)
        # Whoa! What a line! Read more about it at
        # http://stackoverflow.com/questions/12523548/confused-by
    }

    inst.pkg <- rownames(installed.packages())
    names(pkg) <- pkg
    pkg <- sapply(pkg, function(p)
        c(inst.pkg[tolower(inst.pkg) %in% tolower(p)], NA)[1])
    case.pkg <- pkg[names(pkg) != unname(pkg) & !is.na(pkg)]
    if(length(case.pkg) > 0)
        cat(sprintf("Assuming you mean packages %s.\n",
                    paste(sprintf("`%s`", case.pkg), collapse=", ")))
    for(p in pkg[!is.na(pkg)])
        base::library(p, character.only=TRUE)

    pkg <- names(pkg)[is.na(pkg)]
    if(length(pkg) > 0){
        if(missing(install)){
            cat(sprintf("Packages %s are not installed. Install them? (y/n)\n",
                        paste(sprintf("`%s`", pkg), collapse=", ")))
            install <- "y" %in% readline()
        }
        if(install){
            pkg <- sapply(pkg, function(p){
                tryCatch({
                    install.packages(p)
                    TRUE
                }, error=function(...) FALSE)
            })
            if(any(pkg)){
                cat(sprintf("Successfully installed packages %s.\n",
                    paste(sprintf("`%s`", names(pkg)[pkg]), collapse=", ")))
                base::library(names(pkg)[pkg], character.only=TRUE)
            }
            if(any(!pkg))
                cat(sprintf("Failed to install packages %s.\n",
                    paste(sprintf("`%s`", names(pkg)[!pkg]), collapse=", ")))
        } else {
            cat(sprintf("Packages %s are not installed and was not loaded.\n",
                        paste(sprintf("`%s`", pkg), collapse=", ")))
        }
    }
}

# Reload package
reload <- function(pkg){
    deps <- sapply(search()[-1L], function(p){
        pkg %in% tryCatch(get(".Depends", p, inherits=FALSE), error=function(...) FALSE)
        # Not sure what `inherits` does, I just copied from `detach()`
    })
    deps <- names(deps)[deps]
    if(length(deps) > 0){
        cat(sprintf("Also reloading depending packages %s.\n",
            paste("`", sub("^package:", "", deps), "`", sep="", collapse=", ")))
    }
    for(p in c(deps, sprintf("package:%s", pkg)))
        detach(pos=match(p, search()), unload=TRUE)
    for(p in c(pkg, sub("^package:", "", deps)))
        eval(substitute(library(p), list(p=p)))
}

roxygen.update.description <- function(){
    pkgName <- gsub(".*/", "", getwd())
    if(!pkgName %in% dir()) stop("Cannot update version number, are you in the right folder?")

    setwd(pkgName)
    tab <- read.table("DESCRIPTION", sep="\n",
                      quote="~", comment.char="~",
                      stringsAsFactors=FALSE, blank.lines.skip=FALSE)[[1]]
    i <- grep("^Version:", tab)
    build.no <- as.integer(sub(".*-", "", tab[i])) + 1
    tab[i] <- sub("\\d+$", build.no, tab[i])
    tab[i+1] <- paste("Date", format(Sys.time(), "%Y-%m-%d"), sep=": ")
    write(tab, file="DESCRIPTION")

    setwd("..")
}

#------------------------------------------------------------------[ Debugging ]
#
#   http://stackoverflow.com/questions/12807237/r-undebug-all-functions


## return the names of the objects (from a vector of list of
## names of objects) that are functions and have debug flag set
isdebugged_safe <- function(x,ns=NULL)  {
    g <- if (is.null(ns)) get(x) else getFromNamespace(x,ns)
    is.function(g) && isdebugged(g)
}

which_debugged <- function(objnames,ns=NULL) {
    if (!length(objnames)) return(character(0))
    objnames[sapply(objnames,isdebugged_safe,ns=ns)]
}

all_debugged <- function(where=search(), show_empty=FALSE) {
    ss <- setNames(lapply(where,function(x) {
        which_debugged(ls(x,all.names=TRUE))
        }),gsub("package:","",where))
    ## find attached namespaces
    ## (is there a better way to test whether a namespace exists with a given name??)
    ns <- unlist(sapply(gsub("package:","",where),
                 function(x) {
                     if (inherits({n <- try(getNamespace(x),silent=TRUE)},
                         "try-error")) NULL else x
                 }))
    ss_ns <- setNames(lapply(ns,function(x) {
        objects <- ls(getNamespace(x),all.names=TRUE)
        which_debugged(objects,ns=x)
        }),ns)
    if (!show_empty) {
        ss <- ss[sapply(ss,length)>0]
        ss_ns <- ss_ns[sapply(ss_ns,length)>0]
    }
    ## drop overlaps
    for (i in names(ss))
        ss_ns[[i]] <- setdiff(ss_ns[[i]],ss[[i]])
    list(env=ss,ns=ss_ns)
}

undebug_all <- function(where=search()) {
    aa <- all_debugged(where)
    lapply(aa$env,undebug)
    ## now debug namespaces
    invisible(mapply(function(ns,fun) {
        undebug(getFromNamespace(fun,ns))
    },names(aa$ns),aa$ns))
}


#-------------------------------------------------------------------[ Plotting ]

cmpimg <- function(x, pal=c("red", "black", "green"), cuts=15, ...){
    a <- max(abs(x), na.rm=TRUE)
    levelplot(x, at=seq(-a, a, length.out=cuts+1), cuts=cuts, ...)
}

fig.usr <- function(){
    # The widths of the margins in relation to the plot area
    mar.rel <- par("mar")*par("csi") / rev(par("pin"))
    # The min and max coordinates in the plot
    coord <- matrix(par("usr"), 2)
    # The coordinates of extended all the way to the figure egdes
    coord[c(3,1,4,2)] + c(-1, -1, 1, 1) *
        rev(apply(coord, 2, diff)) * mar.rel
}


#----------------------------------------------------------------[ Other stuff ]

# If you try to use `abind` before it is loaded,
# remove this wrapper and attach the real function.
if(!"package:abind" %in% search()){
    abind <- function(...){
        rm("abind", envir=globalenv())
        if(!require(abind)) library(abind, install=TRUE)
        abind(...)
    }
}

bayes.interval <- function(k, n, a=c(.025, .975), res=1000){
    library(zoo)
    q <- 1:res/res
    p <- q^k*(1-q)^(n-k)
    A <- diff(q) * rollmean(p, 2)
    A <- cumsum(A)/sum(A)
    approx(A, rollmean(q, 2), a)$y
}

capitalize <- function(str){
    substring(str, 1, 1) <- toupper(substring(str, 1, 1))
    substring(str, 2) <- tolower(substring(str, 2))
    return(str)
}

# @param ... A number of character scalars and an optional logical specifying if
#   the prompt should be updated. If the logical is provided it will be set to
#   the default (it is "sticky").
cd <- function(...){
    dirs <- unlist(sapply(list(...), function(x) if(is.character(x)) x else NULL))
    setwd(paste(dirs, sep="/"))

    update.prompt <- unlist(sapply(list(...), function(x) if(is.logical(x)) x else NULL))
    if(is.null(update.prompt)){
        if(is.null(unlist(options("cd.update.prompt")))){
            options(cd.update.prompt=TRUE)
            update.prompt <- TRUE
        } else {
            update.prompt <- unlist(options("cd.update.prompt"))
        }
    } else {
        options(cd.update.prompt=update.prompt[1])
    }
    if(update.prompt[1]){
        folder <- sub(".*/", "", getwd())
        options(prompt=sprintf("\n%s> ", folder),
                continue=sprintf("%s: ", paste(rep(" ", nchar(folder)), collapse="")))
    } else {
        options(prompt="> ", continue=": ")
    }
}

clc <- function(){
    #printf("%s", rep("\n", 40))

    #printf("%s%s%s", paste(rep("\n", 5), collapse=""),
    #                      style(paste(rep("\n", 30), collapse=""), bg=194),
    #                      paste(rep("\n", 5), collapse=""))
    if(!is.null(getOption("color.scheme")) && getOption("color.scheme") == "dark on light"){
        x <- round(5*seq(runif(1), 1, length=15))
        y <- round(5*seq(runif(1), 1, length=15))
        z <- round(5*seq(0, 1, length=15))
    } else {
        x <- round(5*seq(runif(1), 0, length=15))
        y <- round(5*seq(runif(1), 0, length=15))
        z <- round(5*seq(1, 0, length=15))
    }
    ramp <- trunc(16 + x + 6*y + 6*6*z)
    
    str <- rep("\n", 5)
    for(i in trunc(c(rev(ramp), ramp))){
        str <- c(str, style(paste(rep("\n", 1), collapse=""), bg=i))
    }
    str <- c(str, rep("\n", 5))
    cat(str)
}

#' Decimal to fraction conversion
#'
#' Calculates (or approximates if needed) the smallest fraction that is equal to
#' real numbers using the continued fraction method.
#'
#' @param x A real number
#' @param max.depth Maximum recursive depth
#' @returns If \code{x} is scalar a two-element-vector with numerator and
#'   denominator. If \code{x} is a vector a two-row-matrix with columns
#'   corresponding to each element in \code{x}.
dec2frac <- function(x, max.depth=10){
    if(length(x) > 1) return(sapply(x, function(x) dec2frac(x, max.depth)))
    i <- floor(x)
    if(i == x)
        return(c(i,1))
    f <- 1/(x-i)
    if(f > 1000 || max.depth < 1)
        return(c(i, 1))
    ff <- dec2frac(f, max.depth=max.depth-1)
    return(c(i*ff[1] + ff[2], ff[1]))
}

dyn.require <- function(x, reload=FALSE){
    if(identical(1, grep('\\.so$', x))){
        x.name <- gsub("\\.so", '', gsub(".*/", "", x))
        x.path <- x
    } else {
        x.name <- x
        x.path <- paste(x, ".so", sep="")
    }

    if(x.name %in% getLoadedDLLs()){
        if(reload){
            dyn.unload(x.path)
            dyn.load(x.path)
        }
    } else {
        dyn.load(x.path)
    }
}

# Elongate an interval with a fraction on both sides.
extend <- function(x, inc=.04) x + c(-1, 1)*diff(x)*inc

# Good fonts: thin, roman
figlet <- function(x, font="thin"){
    for(l in system(sprintf("figlet -f %s \"%s\"", font, x), intern=TRUE))
        cat(sprintf("#   %s\n", l))
}

is.blank <- function(x, false.triggers=FALSE){
    if(is.function(x)) return(FALSE) # Some of the tests below trigger warnings when used on functions
    return(
        is.null(x) ||
        length(x) == 0 ||
        all(is.na(x)) ||
        all(x=="") ||
        (false.triggers && all(!x))
    )
}

lattice.group.col <- c("#0080ff", "#ff00ff", "#006400", "#ff0000", "#ffa500", "#00ff00", "#a52a2a")

leaves <- function(x){
    if(any(sapply(x, is.list))){
        return(unlist(lapply(x, leaves), recursive=FALSE))
    } else {
        return(x)
    }
}

log.seq <- function(start, end, length=10) exp(seq(log(start), log(end), length=length))
inv.seq <- function(start, end, length=10) 1/seq(1/start, 1/end, length=length)
log.seq.int <- function(...) int.seq(..., seq.f=log.seq)
inv.seq.int <- function(...) int.seq(..., seq.f=inv.seq)
int.seq <- function(start, end, len=10, seq.f){
    if(abs(round(end) - round(start)) + 1 < len)
        stop(sprintf("There aren't %i unique integers between %g and %g", len, start, end))

    l <- round(seq.f(start, end, len))
    if(length(unique(l)) == len) return(l)
    
    inc <- if(length(unique(l)) < len) 1 else -1
    test.len <- len
    while(length(unique(l)) != len){
        test.len <- test.len + inc
        l <- round(seq.f(start, end, test.len))
    }
    return(unique(l))
}

jet <- function(i=100){
    colorRampPalette(c("navy", "blue", "#0080ff", "cyan", "#80ff80", "yellow", "#ff8000", "red", "#800000"))(i)
}

mixedorder <- function(..., na.last = TRUE, decreasing = FALSE){
    library(gtools)
    do.call(order, c(
        lapply(list(...), function(l){
            if(is.character(l)){
                factor(l, levels=mixedsort(unique(l)))
            } else {
                l
            }
        }),
        list(na.last = na.last, decreasing = decreasing)
    ))
}
order2rank <- function(o){
    i <- seq_along(o)
    i[o] <- i
    i
}

na.fill <- function(x, fill){
    x[is.na(x)] <- fill
    return(x)
}
na.rm <- function(x) x[!is.na(x)]
na.rm.max <- function(...) max(..., na.rm=TRUE)
na.rm.mean <- function(...) mean(..., na.rm=TRUE)
na.rm.median <- function(...) median(..., na.rm=TRUE)
na.rm.min <- function(...) min(..., na.rm=TRUE)
na.rm.sd <- function(...) sd(..., na.rm=TRUE)

mode.value <- function(x) levels(x)[table(x) == max(table(x))]

my.date <- function() format(Sys.time(), "%y-%m-%d %a %H:%M")

mv <- function(x){
    y <- x
    rm(list=deparse(substitute(x)), envir=globalenv())
    return(y)
}

pack.list <- function(lst, fld){
    res <- c(lapply(lst, function(x) x[[fld]]), recursive=TRUE)
    if(
        is.factor(lst[[1]][[fld]]) &&
        all(sapply(lst, function(x) identical(levels(x[[fld]]), levels(lst[[1]][[fld]]))))
    ){
        res <- as.factor(res)
        levels(res) <- levels(lst[[1]][[fld]])
    }
    return(res)
}

printf <- function(...) cat(sprintf(...))

pwd <- getwd

q <- function() quit(save="no")

sample.binary <- function(total, selected){
    if(selected < 1) selected <- round(total*selected) # Selected was provided as a fraction
    smp <- rep(FALSE, total)
    smp[sample(total, selected, replace=FALSE)] <- rep(TRUE, selected)
    return(smp)
}

scale.01 <- function(x) return((x - min(x)) / (max(x)-min(x)))
scale.positive.z <- function(x) return((x - min(x)) / sd(x))

self <- function(x, func) func(x)

singplur <- function(n, word){
    # User defined irregular word or phrase
    if(length(word) > 1) return(paste(n, word[1+(n>1)], sep=" "))

    # Predefined irregular or regular noun
    pattern <- paste(c(paste("\\b", c("criterion", "woman", "it", "man"), sep=""),
                       "us", "um", "s", "[cs]h", "o", "y", "*"),
                     "$", sep="")
    replacement <- c("criteria", "women",
                     "they", "men",
                     "i", "a", "es", "es", "es", "ies", "s")
    i <- 1
    while(!grepl(pattern[i], word)) i <- i + 1
    return(paste(n, if(n > 1) sub(pattern[i], replacement[i], word) else word, sep=" "))
}

stack.matrix <- function(x, byrow=FALSE){
    if(byrow) x <- t(x)
    df <- foreach(i = 1:ncol(x), .combine=rbind) %do% {
        data.frame(ind=if(is.blank(colnames(x)[i])) i else colnames(x)[i], values=x[,i])
    }
    row.names(df) <- NULL
    return(df)
}

sna <- function(x) sum(is.na(x))
snna <- function(x) sum(!is.na(x))

source.all <- function(path="."){
    if(!file.exists(path))
        stop("Directory does not exists.")
    for(f in grep("\\.R$", dir(path), value=TRUE))
        source(paste(path, f, sep="/"))
}

table.any <- function(x){
    if(is.factor(x)){
        table(x)
    } else if(is.list(x)){
        names.length <- max(sapply(names(x), nchar))
        field.length <- NULL
        for(y in x){
            if(length(field.length) < length(levels(y))){
                field.length[(length(field.length)+1):length(levels(y))] <- 0
            }
            for(i in 1:length(field.length)){
                field.length[i] <- max(nchar(levels(y)[i]), sprintf("%i", table(y)[i]))
            }
        }
        last.levels <- NULL
        for(col in names(x)){
            y <- x[[col]]
            if(!identical(last.levels, levels(y))){
                last.levels <- levels(y)
                cat(rep(" ", names.length+1),
                    do.call(sprintf, c(as.list(paste("%", field.length, "s", sep="", collapse=" ")), last.levels)),
                    "\n", sep="")
            }
            cat(col,
                rep(" ", names.length+1-nchar(col)),
                do.call(sprintf, c(as.list(paste("%", field.length, "i", sep="", collapse=" ")), table(y))),
                "\n", sep="")
        }
    }
}

top <- function(x, n=10)      return(sort(x[!is.na(x)][x[!is.na(x)] >= sort(x, decreasing=TRUE)[n]][1:n], decreasing=TRUE))
bottom <- function(x, n=10)   return(sort(x[!is.na(x)][x[!is.na(x)] <= sort(x, decreasing=FALSE)[n]][1:n], decreasing=FALSE))
largest <- function(x, n=10)  return(sort(x[!is.na(x)][abs(x[!is.na(x)]) >= sort(abs(x), decreasing=TRUE)[n]][1:n], decreasing=TRUE))
smallest <- function(x, n=10) return(sort(x[!is.na(x)][abs(x[!is.na(x)]) <= sort(abs(x), decreasing=FALSE)[n]][1:n], decreasing=FALSE))

trim <- function(str) sub("^\\s*", "", sub("\\s*$", "", str))

zscore <- function(x, dim, ...){
    if(is.list(x)){
        res <- lapply(x, function(x) (x - mean(x, ...)) / sd(x, ...))
        if(is.data.frame(x)){
            return(data.frame(res))
        } else {
            return(res)
        }
    } else if(is.numeric(x)){
        if(missing(dim))
            return((x - mean(x, ...)) / sd(as.vector(x), ...))
        
    } else
        stop("Datatype not supported")
}


#---------------------------------------------------
# Improved list of objects
# Written by Petr Pikal and David Hinds
# http://stackoverflow.com/questions/1358003/tricks-to-manage-the-available-memory-in-an-r-session
#
.ls.objects <- function (pos = 1, pattern, order.by,
                        decreasing=FALSE, head=FALSE, n=5) {
    napply <- function(names, fn) sapply(names, function(x)
                                         fn(get(x, pos = pos)))
    names <- ls(pos = pos, pattern = pattern)
    obj.class <- napply(names, function(x) as.character(class(x))[1])
    obj.mode <- napply(names, mode)
    obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
    obj.prettysize <- napply(names, function(x) {
                           capture.output(print(object.size(x), units = "auto")) })
    obj.size <- napply(names, object.size)
    obj.dim <- t(napply(names, function(x)
                        as.numeric(dim(x))[1:2]))
    vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
    obj.dim[vec, 1] <- napply(names, length)[vec]
    out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
    names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
    if (!missing(order.by))
        out <- out[order(out[[order.by]], decreasing=decreasing), ]
    if (head)
        out <- head(out, n)
    out
}

# shorthand
lsos <- function(..., n=10) {
    .ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}

rec <- function() options(error=recover, warn=2)
norec <- function() options(error=NULL, warn=1)

# Listing all functions being debugged
# http://stackoverflow.com/questions/6950602/listing-functions-with-debug-flag-set-in-r
ls.deb  <- function(items = search ()){
  .ls.deb <-  function (i){
    f <- ls (i)
    f <- mget (f, as.environment (i), mode = "function",

               ## return a function that is not debugged
               ifnotfound = list (function (x) function () NULL)
               )

    if (length (f) == 0)
      return (NULL)

    f <- f [sapply (f, isdebugged)]
    f <- names (f)

    ## now check whether the debugged function is masked by a not debugged one
    masked <- !sapply (f, function (f) isdebugged (get (f)))

    ## generate pretty output format:
    ## "package::function"  and "(package::function)" for masked debugged functions
    if (length (f) > 0) {
      if (grepl ('^package:', i)) {
        i <- gsub ('^package:', '', i)
        f <- paste (i, f, sep = "::")
      }

      f [masked] <- paste ("(", f [masked], ")", sep = "")

      f
    } else {
      NULL
    }
  }

  functions <- lapply (items, .ls.deb)
  unlist (functions)
}


#-------------------------------------------------------[ Workspace management ]

library("dataview")

ev <- function(...) entry.view(...)
hv <- heat.view
tv <- tree.view
os <- whos
if(exists("wrap.view")) wv <- wrap.view
print.factor <- heat.view

# Setup whos excluding
whos.set.mask()

